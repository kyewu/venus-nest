// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HomeResources {
  id          Int      @id @default(autoincrement())
  title       String?
  subTitle    String?
  url         String?
  image       String?
  description String?
  module      String   @default("home")
  type        String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("home_resources")
}

model Users {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  name      String?
  type      Int       @default(0)
  expired   DateTime?
  status    Int       @default(0)
  phone     Int       @unique
  email     String?   @unique
  unionId   String?
  openId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  courses     Courses[]
  attachments AttachMents[]

  @@map("users")
}

model Courses {
  id          Int      @id @default(autoincrement())
  title       String
  subTitle    String?
  desc        String?
  coverId     Int?     @unique
  author      Int
  originPrice Int?
  price       Int?
  status      Int?
  counts      Int?
  order       Int?
  detail      String?
  type        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contents       CoursesContents[]
  users          Users             @relation(fields: [author], references: [id])
  cover          AttachMents?      @relation(fields: [coverId], references: [id])
  tags           CourseOnTags[]
  courseComments CourseComments[]

  @@map("courses")
}

model CoursesContents {
  id        Int      @id @default(autoincrement())
  courseId  Int
  title     String?
  type      String?
  order     Int      @default(1000)
  pid       Int?
  status    Int
  author    Int
  tagId     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Courses  @relation(fields: [courseId], references: [id])

  parent          CoursesContents?   @relation("CousersContentsRelation", fields: [pid], references: [id]) //self one to many
  children        CoursesContents[]  @relation("CousersContentsRelation")
  contentComments ContentsComments[]

  @@map("courses_contents")
}

model CourseTags {
  id     Int     @id @default(autoincrement())
  name   String?
  typeId Int?
  order  Int     @default(1000)
  status Int     @default(0)

  courses CourseOnTags[]
  types   CourseTypes?   @relation(fields: [typeId], references: [id])

  @@map("dict_course_tags")
}

model CourseOnTags {
  id       Int        @id @default(autoincrement())
  courseId Int
  tagId    Int
  course   Courses    @relation(fields: [courseId], references: [id])
  tag      CourseTags @relation(fields: [tagId], references: [id])
}

model CourseTypes {
  id     Int     @id @default(autoincrement())
  name   String?
  order  Int     @default(1000)
  status Int     @default(0)

  tag CourseTags[]

  @@map("dict_course_types")
}

model AttachMents {
  id        Int      @id @default(autoincrement())
  type      String?
  location  String?
  name      String?
  ossType   String?
  usersId   Int
  status    Int      @default(0) // 0 disable 1 enable
  desc      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      Users                  @relation(fields: [usersId], references: [id])
  course     Courses?
  attributes AttachmentAttributes[]

  @@map("attachments")
}

model AttachmentAttributes {
  id           Int     @id @default(autoincrement())
  attachmentId Int
  attributeId  Int
  value        String?
  desc         String?

  attachments AttachMents? @relation(fields: [attachmentId], references: [id])
  attribute   Attributes   @relation(fields: [attributeId], references: [id])

  @@map("attachments_attributes")
}

model Attributes {
  id   Int     @id @default(autoincrement())
  type String?
  name String
  desc String

  attachmentAttributes AttachmentAttributes[]
}

model Comments {
  id      Int    @id @default(autoincrement())
  pid     Int?
  userId  Int
  content String
  hands   Int    @default(0)
  status  Int    @default(1)
  isBest  Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent          Comments?          @relation("CommentsRelation", fields: [pid], references: [id])
  children        Comments[]         @relation("CommentsRelation")
  commentsCourse  CourseComments[]
  commentsContent ContentsComments[]

  @@map("comments")
}

model CourseComments {
  id         Int @id @default(autoincrement())
  coursesId  Int
  commentsId Int

  courses  Courses  @relation(fields: [coursesId], references: [id])
  Comments Comments @relation(fields: [commentsId], references: [id])

  @@map("courses_comments")
}

model ContentsComments {
  id        Int @id @default(autoincrement())
  contentId Int
  commentId Int
  status    Int @default(1)

  comment Comments        @relation(fields: [commentId], references: [id])
  content CoursesContents @relation(fields: [contentId], references: [id])

  @@map("contents_comments")
}
